// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Teachable Machine ‡πÇ‡∏°‡πÄ‡∏î‡∏•
import * as tmImage from '@teachablemachine/image'
import { CONFIG, isValidWord } from './config.js'

// ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
let modelA = null
let modelB = null
let isLoading = false
let hasShownUnknown = false // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ Unknown-first

// ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ä‡∏∏‡∏î
export async function loadModels() {
  if (isLoading) return { success: false, error: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' }
  
  try {
    isLoading = true
    console.log('[INFO] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...')
    
    // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• A (‡∏ú‡∏°, ‡∏£‡∏±‡∏Å, ‡∏Ñ‡∏∏‡∏ì, ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©)
    try {
      const modelAUrl = CONFIG.MODEL_PATHS.handA + '/model.json'
      const metadataAUrl = CONFIG.MODEL_PATHS.handA + '/metadata.json'
      modelA = await tmImage.load(modelAUrl, metadataAUrl)
      console.log('[SUCCESS] ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• A ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
    } catch (error) {
      console.warn('[WARNING] ‡πÇ‡∏°‡πÄ‡∏î‡∏• A ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:', error.message)
    }
    
    // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• B (‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì, ‡πÇ‡∏≠‡πÄ‡∏Ñ, ‡∏´‡∏¢‡∏∏‡∏î, ‡πÑ‡∏õ, ‡∏°‡∏≤)
    try {
      const modelBUrl = CONFIG.MODEL_PATHS.handB + '/model.json'
      const metadataBUrl = CONFIG.MODEL_PATHS.handB + '/metadata.json'
      modelB = await tmImage.load(modelBUrl, metadataBUrl)
      console.log('[SUCCESS] ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• B ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
    } catch (error) {
      console.warn('[WARNING] ‡πÇ‡∏°‡πÄ‡∏î‡∏• B ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:', error.message)
    }
    
    return { 
      success: modelA !== null || modelB !== null, 
      models: { A: !!modelA, B: !!modelB }
    }
    
  } catch (error) {
    console.error('[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ:', error)
    return { success: false, error: error.message }
  } finally {
    isLoading = false
  }
}

// ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
export async function predict(imageElement) {
  // Unknown-first: ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏à‡∏∞‡πÑ‡∏î‡πâ Unknown ‡πÄ‡∏™‡∏°‡∏≠
  if (CONFIG.UNKNOWN_FIRST && !hasShownUnknown) {
    hasShownUnknown = true
    console.log('[UNKNOWN-FIRST] ‡πÅ‡∏™‡∏î‡∏á Unknown ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å')
    return {
      word: 'Unknown',
      confidence: 0.0,
      source: 'unknown-first',
      details: '‡πÅ‡∏™‡∏î‡∏á Unknown ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!modelA && !modelB) {
    return {
      word: 'Unknown',
      confidence: 0.0,
      source: 'no-model',
      details: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ'
    }
  }
  
  try {
    const predictions = []
    
    // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• A
    if (modelA) {
      const predA = await modelA.predict(imageElement)
      for (let i = 0; i < predA.length; i++) {
        const className = predA[i].className
        const probability = predA[i].probability
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°
        if (isValidWord(className)) {
          predictions.push({
            word: className,
            confidence: probability,
            source: 'modelA'
          })
        }
      }
    }
    
    // ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• B
    if (modelB) {
      const predB = await modelB.predict(imageElement)
      for (let i = 0; i < predB.length; i++) {
        const className = predB[i].className
        const probability = predB[i].probability
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°
        if (isValidWord(className)) {
          predictions.push({
            word: className,
            confidence: probability,
            source: 'modelB'
          })
        }
      }
    }
    
    // ‡∏´‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ confidence ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    if (predictions.length > 0) {
      const best = predictions.reduce((prev, current) => 
        current.confidence > prev.confidence ? current : prev
      )
      
      // ‡∏ñ‡πâ‡∏≤ confidence ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå ‡∏à‡∏∞‡πÑ‡∏î‡πâ Unknown
      if (best.confidence < CONFIG.MIN_CONFIDENCE) {
        return {
          word: 'Unknown',
          confidence: best.confidence,
          source: 'low-confidence',
          details: `‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ${(best.confidence * 100).toFixed(1)}% ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå ${CONFIG.MIN_CONFIDENCE * 100}%`
        }
      }
      
      return {
        word: best.word,
        confidence: best.confidence,
        source: best.source,
        details: `‡∏à‡∏≤‡∏Å ${best.source} ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ${(best.confidence * 100).toFixed(1)}%`
      }
    }
    
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    return {
      word: 'Unknown',
      confidence: 0.0,
      source: 'no-prediction',
      details: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏î‡∏à‡∏≥‡πÑ‡∏î‡πâ'
    }
    
  } catch (error) {
    console.error('[ERROR] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:', error)
    return {
      word: 'Unknown',
      confidence: 0.0,
      source: 'error',
      details: error.message
    }
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
export function getModelStatus() {
  return {
    isLoading,
    hasModelA: !!modelA,
    hasModelB: !!modelB,
    hasAnyModel: !!(modelA || modelB)
  }
}

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Unknown-first (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
export function resetUnknownFirst() {
  hasShownUnknown = false
  console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Unknown-first')
}
