import React, { useState } from 'react'
import { CONFIG } from '../lib/config.js'

export default function RightPanel() {
  const [capturedWords, setCapturedWords] = useState([])
  const [generatedSentence, setGeneratedSentence] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [latestEmotion, setLatestEmotion] = useState('neutral') // ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å CameraFeed
  React.useEffect(() => {
    // Listen for capture events from CameraFeed
    const handleCapture = (event) => {
      const captureData = event.detail
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• emotion (‡πÉ‡∏ä‡πâ emotion ‡πÅ‡∏ó‡∏ô face)
      if (captureData.emotion && captureData.emotion.bestEmotion) {
        setLatestEmotion(captureData.emotion.bestEmotion)
        console.log('üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:', captureData.emotion.bestEmotion, 
                   `(${(captureData.emotion.confidence * 100).toFixed(1)}%)`)
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡∏£‡∏ß‡∏° Unknown ‡∏î‡πâ‡∏ß‡∏¢)
      const wordData = {
        ...captureData,
        id: Date.now(), // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key
        imageUrl: captureData.thumbnailUrl || (captureData.imageBlob ? URL.createObjectURL(captureData.imageBlob) : null)
      }
      
      setCapturedWords(prev => [...prev, wordData])
      console.log('üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥:', captureData.hands?.bestWord || 'Unknown', 
                 `(${((captureData.hands?.confidence || 0) * 100).toFixed(1)}%)`)
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (captureData.hands && captureData.hands.allResults) {
        console.log('ü§è ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Hand):', captureData.hands.allResults)
      }
      if (captureData.emotion && captureData.emotion.allEmotions) {
        console.log('üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Emotion):', captureData.emotion.allEmotions)
      }
      if (captureData.llmJson) {
        console.log('ü§ñ LLM JSON:', captureData.llmJson)
      }
    }
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö CameraFeed ‡∏ú‡πà‡∏≤‡∏ô custom event
    window.addEventListener('wordCaptured', handleCapture)
    
    return () => {
      window.removeEventListener('wordCaptured', handleCapture)
    }
  }, [])
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
  const handleGenerateSentence = async () => {
    if (capturedWords.length === 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ')
      return
    }
    
    setIsGenerating(true)
    
    try {
      const words = capturedWords.map(item => item.word)
      
      console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Backend:', { words, emotion: latestEmotion })
      
      // ‡∏£‡∏ß‡∏° JSON ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
      const llmData = {
        capturedData: capturedWords.map(item => item.llmJson).filter(Boolean),
        summary: {
          words: capturedWords.map(item => item.hands?.bestWord || 'Unknown'),
          emotions: capturedWords.map(item => item.emotion?.bestEmotion || 'neutral'),
          overallEmotion: latestEmotion,
          totalCaptures: capturedWords.length
        }
      }
      
      console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Backend (LLM format):', llmData)
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API backend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
      const response = await fetch(`${CONFIG.API_BASE_URL}/api/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(llmData)
      })
      
      if (response.ok) {
        const data = await response.json()
        setGeneratedSentence(data.sentences[0] || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÑ‡∏î‡πâ')
      } else {
        // Fallback: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ
        const fallbackSentence = words.join(' ')
        setGeneratedSentence(`${fallbackSentence} (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ)`)
      }
      
    } catch (error) {
      console.error('[ERROR] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ:', error)
      
      // Fallback: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ
      const words = capturedWords.map(item => item.word)
      const fallbackSentence = words.join(' ')
      setGeneratedSentence(`${fallbackSentence} (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ)`)
    } finally {
      setIsGenerating(false)
    }
  }
  
  // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleClearWords = () => {
    setCapturedWords([])
    setGeneratedSentence('')
    setLatestEmotion('neutral') // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢
  }
  
  return (
    <div className="space-y-6">
      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-bold text-text">‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ</h3>
          <div className="flex items-center gap-3">
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <div className="flex items-center gap-1 text-sm">
              <span>üòä</span>
              <span className="text-muted-foreground">‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {latestEmotion}</span>
            </div>
            {capturedWords.length > 0 && (
              <button 
                className="btn btn-secondary"
                onClick={handleClearWords}
                style={{ fontSize: '0.875rem', padding: '0.5rem 1rem' }}
              >
                üóëÔ∏è ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </button>
            )}
          </div>
        </div>
        
        {capturedWords.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ</p>
            <p className="text-sm">‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥</p>
          </div>
        ) : (
          <div className="space-y-3">
            {capturedWords.map((item, index) => (
              <div key={item.id || index} className="result-item">
                {item.imageUrl && (
                  <img 
                    src={item.imageUrl} 
                    alt={item.hands?.bestWord || 'Unknown'}
                    className="result-thumbnail"
                    style={{ width: '60px', height: '60px', objectFit: 'cover', borderRadius: '8px' }}
                  />
                )}
                <div className="flex-1">
                  <div className="result-label">
                    {item.hands?.bestWord || 'Unknown'}
                  </div>
                  <div className="result-confidence">
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {((item.hands?.confidence || 0) * 100).toFixed(1)}%
                  </div>
                  {item.emotion && item.emotion.bestEmotion && (
                    <div className="text-sm text-blue-600">
                      üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {item.emotion.bestEmotion} ({(item.emotion.confidence * 100).toFixed(1)}%)
                    </div>
                  )}
                  {item.face && item.face.detected && (
                    <div className="text-sm text-green-600">
                      üë§ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {item.face.faceCount} ({(item.face.bestFaceConfidence * 100).toFixed(0)}%)
                    </div>
                  )}
                  {item.hands?.details && (
                    <div className="text-sm text-muted-foreground">
                      {item.hands.details}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ */}
      {capturedWords.length > 0 && (
        <div className="card">
          <button
            className={`btn ${isGenerating ? 'btn-secondary' : 'btn-primary'}`}
            onClick={handleGenerateSentence}
            disabled={isGenerating}
            style={{ width: '100%' }}
          >
            {isGenerating ? (
              <>
                <span className="loading"></span>
                <span style={{ marginLeft: '0.5rem' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ...</span>
              </>
            ) : (
              '‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ'
            )}
          </button>
        </div>
      )}
      
      {/* ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ */}
      {generatedSentence && (
        <div className="card">
          <h3 className="text-xl font-bold text-text mb-3">‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ</h3>
          <div className="p-4 bg-surface border border-border rounded-lg">
            <p className="text-lg text-text leading-relaxed">
              "{generatedSentence}"
            </p>
          </div>
        </div>
      )}
    </div>
  )
}
