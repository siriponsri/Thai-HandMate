import React, { useRef, useEffect, useState } from 'react'
import { loadModels, getModelStatus, processImageAsync } from '../lib/tm.js'
import { CONFIG } from '../lib/config.js'

export default function CameraFeed({ onCapture }) {
  const videoRef = useRef(null)
  const canvasRef = useRef(null)
  const fileInputRef = useRef(null)
  const [stream, setStream] = useState(null)
  const [isCapturing, setIsCapturing] = useState(false)
  const [modelStatus, setModelStatus] = useState({ hasAnyModel: false, isLoading: false })
  const [faceDetections, setFaceDetections] = useState([])
  const [uploadedImage, setUploadedImage] = useState(null)
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
  useEffect(() => {
    async function startCamera() {
      try {
        const mediaStream = await navigator.mediaDevices.getUserMedia({
          video: {
            width: CONFIG.CAMERA.width,
            height: CONFIG.CAMERA.height,
            facingMode: CONFIG.CAMERA.facingMode
          }
        })
        
        setStream(mediaStream)
        if (videoRef.current) {
          videoRef.current.srcObject = mediaStream
        }
      } catch (error) {
                console.error('[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', error)
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á')
      }
    }
    
    startCamera()
    
    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
      }
    }
  }, [])
  
  // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
  useEffect(() => {
    async function initModels() {
      const result = await loadModels()
      setModelStatus(getModelStatus())
      
      if (result.success) {
        console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
      } else {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ:', result.error)
      }
    }
    
    initModels()
  }, [])
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const handleFileUpload = async (event) => {
    const file = event.target.files[0]
    if (!file) return
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
    if (!file.type.startsWith('image/')) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
      return
    }
    
    setIsCapturing(true)
    
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô data URL
      const reader = new FileReader()
      reader.onload = async (e) => {
        const img = new Image()
        img.onload = async () => {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û
          const canvas = canvasRef.current
          const ctx = canvas.getContext('2d')
          
          // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î canvas ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
          canvas.width = img.width
          canvas.height = img.height
          
          // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏•‡∏á‡∏ö‡∏ô canvas
          ctx.drawImage(img, 0, 0)
          
          // ‡πÅ‡∏õ‡∏•‡∏á canvas ‡πÄ‡∏õ‡πá‡∏ô blob
          canvas.toBlob(async (blob) => {
            const thumbnailUrl = URL.createObjectURL(blob)
            
            try {
              // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
              const result = await processImageAsync(img)
              
              console.log('üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:', result)
              
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï face detections
              if (result.face && result.face.faces) {
                setFaceDetections(result.face.faces)
              }
              
              // ‡∏™‡πà‡∏á‡∏ú‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á parent component
              const captureData = {
                word: result.hands.bestWord,
                confidence: result.hands.confidence,
                thumbnailUrl: thumbnailUrl,
                source: result.hands.source,
                details: result.hands.details,
                timestamp: result.timestamp,
                hands: result.hands,
                face: result.face,
                emotion: result.emotion,
                forLLM: result.forLLM,
                llmJson: result.llmJson,
                apiJson: result.apiJson,
                isUploaded: true
              }
              
              if (onCapture) {
                onCapture(captureData)
              }
              
              window.dispatchEvent(new CustomEvent('wordCaptured', { detail: captureData }))
              
            } catch (error) {
              console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û:', error)
              alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ')
            }
          }, 'image/jpeg', 0.8)
        }
        
        img.src = e.target.result
        setUploadedImage(e.target.result)
      }
      
      reader.readAsDataURL(file)
      
    } catch (error) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û:', error)
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ')
    } finally {
      setIsCapturing(false)
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï input
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
    }
  }
  
  // ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
  const handleCapture = async () => {
    if (!videoRef.current || isCapturing) return
    
    setIsCapturing(true)
    
    try {
      const video = videoRef.current
      const canvas = canvasRef.current
      const ctx = canvas.getContext('2d')
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î canvas
      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      
      // ‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡∏á‡∏ö‡∏ô canvas
      ctx.drawImage(video, 0, 0)
      
      // ‡πÅ‡∏õ‡∏•‡∏á canvas ‡πÄ‡∏õ‡πá‡∏ô blob ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö thumbnail  
      canvas.toBlob(async (blob) => {
        const thumbnailUrl = URL.createObjectURL(blob)
        
        try {
          // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö async (Hand + Face + Emotion)
          const result = await processImageAsync(video)
          
          console.log('üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (Hand + Face + Emotion):', result)
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï face detections
          if (result.face && result.face.faces) {
            setFaceDetections(result.face.faces)
          }
          
          // ‡∏™‡πà‡∏á‡∏ú‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á parent component ‡πÅ‡∏•‡∏∞ dispatch event
          const captureData = {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (backward compatibility)
            word: result.hands.word,
            confidence: result.hands.confidence,
            thumbnailUrl: thumbnailUrl,
            source: result.hands.source,
            details: result.hands.details,
            timestamp: result.timestamp,
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LLM
            hands: result.hands,
            face: result.face,
            emotion: result.emotion,
            forLLM: result.forLLM,
            
            // JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LLM
            llmJson: result.llmJson,
            apiJson: result.apiJson
          }
          
          if (onCapture) {
            onCapture(captureData)
          }
          
          // ‡∏™‡πà‡∏á custom event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RightPanel
          window.dispatchEvent(new CustomEvent('wordCaptured', { detail: captureData }))
          
        } catch (error) {
          console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:', error)
          
          if (onCapture) {
            const captureData = {
              word: 'Unknown',
              confidence: 0.0,
              thumbnailUrl: thumbnailUrl,
              source: 'error',
              details: error.message,
              timestamp: new Date().toISOString(),
              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error case
              hands: { bestWord: 'Unknown', confidence: 0, source: 'error', allResults: [], details: error.message },
              face: { bestEmotion: 'neutral', confidence: 0, allEmotions: [], details: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' },
              forLLM: { words: [], emotion: 'neutral', wordConfidences: [], emotionConfidences: [] }
            }
            
            onCapture(captureData)
            
            // ‡∏™‡πà‡∏á custom event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RightPanel
            window.dispatchEvent(new CustomEvent('wordCaptured', { detail: captureData }))
          }
        }
      }, 'image/jpeg', 0.8)
      
    } catch (error) {
      console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û:', error)
    } finally {
      setIsCapturing(false)
    }
  }
  
  return (
    <div className="card">
      <div className="camera-container" style={{ position: 'relative' }}>
        {/* ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ */}
        <video
          ref={videoRef}
          className="camera-video"
          autoPlay
          playsInline
          muted
          style={{ display: uploadedImage ? 'none' : 'block' }}
        />
        
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
        {uploadedImage && (
          <img 
            src={uploadedImage} 
            alt="Uploaded" 
            className="camera-video"
            style={{ objectFit: 'contain' }}
          />
        )}
        
        {/* Canvas ‡∏ã‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û) */}
        <canvas ref={canvasRef} style={{ display: 'none' }} />
        
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≠‡∏ö Face Detection */}
        {faceDetections.map((face, index) => (
          <div
            key={index}
            style={{
              position: 'absolute',
              border: '3px solid #00ff00',
              borderRadius: '8px',
              left: `${face.box.x * 100}%`,
              top: `${face.box.y * 100}%`,
              width: `${face.box.width * 100}%`,
              height: `${face.box.height * 100}%`,
              pointerEvents: 'none',
              boxShadow: '0 0 0 1px rgba(0, 255, 0, 0.3)'
            }}
          >
            <span style={{
              position: 'absolute',
              top: '-25px',
              left: '0',
              background: '#00ff00',
              color: '#000',
              padding: '2px 8px',
              borderRadius: '4px',
              fontSize: '12px',
              fontWeight: 'bold'
            }}>
              Face {index + 1} ({(face.confidence * 100).toFixed(0)}%)
            </span>
          </div>
        ))}
        
        {/* Input file ‡∏ã‡πà‡∏≠‡∏ô */}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleFileUpload}
          style={{ display: 'none' }}
        />
        
        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
        <div style={{ 
          position: 'absolute', 
          bottom: '1rem', 
          left: '50%', 
          transform: 'translateX(-50%)',
          display: 'flex',
          gap: '1rem'
        }}>
          <button
            className={`btn ${isCapturing ? 'btn-secondary' : 'btn-primary'}`}
            onClick={handleCapture}
            disabled={isCapturing || uploadedImage}
            style={{ minWidth: '120px' }}
          >
            {isCapturing ? (
              <>
                <span className="loading"></span>
                <span style={{ marginLeft: '0.5rem' }}>‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û...</span>
              </>
            ) : (
              'üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û'
            )}
          </button>
          
          <button
            className="btn btn-accent"
            onClick={() => fileInputRef.current?.click()}
            disabled={isCapturing}
            style={{ minWidth: '120px' }}
          >
            üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
          </button>
          
          {uploadedImage && (
            <button
              className="btn btn-secondary"
              onClick={() => {
                setUploadedImage(null)
                setFaceDetections([])
              }}
            >
              ‚ùå ‡∏•‡πâ‡∏≤‡∏á
            </button>
          )}
        </div>
        
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏• */}
        <div style={{ 
          position: 'absolute', 
          top: '1rem', 
          left: '1rem'
        }}>
          <div className={`badge ${modelStatus.hasAnyModel ? 'badge-success' : 'badge-warning'}`}>
            {modelStatus.isLoading ? '‚è≥ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...' : 
             modelStatus.hasAnyModel ? '‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°' : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏•'}
          </div>
        </div>
      </div>
    </div>
  )
}
